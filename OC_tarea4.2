{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "31fb5948",
   "metadata": {},
   "source": [
    "*Read and reproduce the example about the Boston housing\n",
    "dataset given in Gplearn: Symbolic Transformer. Then, explain how the symbolic transformer method helps to improve\n",
    "the regressionâ€™s performance. Upload your results to Github\n",
    "in the form of a Jupyter notebook, then make it interactive\n",
    "using Binder, hence submit your results through both links.\n",
    "The use of Google Colab is highly recommended.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9fc32cea",
   "metadata": {},
   "outputs": [],
   "source": [
    "from gplearn.genetic import SymbolicTransformer\n",
    "from sklearn.utils import check_random_state\n",
    "from sklearn.datasets import load_boston\n",
    "import numpy as np\n",
    "from sklearn.linear_model import Ridge"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a9d023ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "rng = check_random_state(0)\n",
    "boston = load_boston()\n",
    "perm = rng.permutation(boston.target.size)\n",
    "boston.data = boston.data[perm]\n",
    "boston.target = boston.target[perm]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bad8923f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.7593194530498839\n"
     ]
    }
   ],
   "source": [
    "est = Ridge()\n",
    "est.fit(boston.data[:300, :], boston.target[:300])\n",
    "print(est.score(boston.data[300:, :], boston.target[300:]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "e5e23e51",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    |   Population Average    |             Best Individual              |\n",
      "---- ------------------------- ------------------------------------------ ----------\n",
      " Gen   Length          Fitness   Length          Fitness      OOB Fitness  Time Left\n",
      "   0    11.04         0.339876        6         0.822502         0.675124     14.01s\n",
      "   1     6.91         0.593562        7         0.836993         0.602468     23.32s\n",
      "   2     5.07         0.730093        8          0.84063         0.704017     25.16s\n",
      "   3     5.22         0.735525        5         0.847019         0.628351     24.10s\n",
      "   4     6.24         0.734679       10         0.856612         0.565138     23.30s\n",
      "   5     8.23         0.721433       18          0.85677         0.728095     21.35s\n",
      "   6    10.20         0.717937       14         0.875233         0.619693     17.02s\n",
      "   7    11.84         0.720667       14         0.875927         0.609363     16.77s\n",
      "   8    12.56         0.733019       27         0.881705         0.390121     16.10s\n",
      "   9    13.61          0.73144       16         0.873285         0.598466     21.75s\n",
      "  10    14.81         0.737687       16         0.873915          0.67127     17.62s\n",
      "  11    14.84          0.73787       21         0.874944         0.467722     12.27s\n",
      "  12    15.40         0.740935       22         0.878053         0.534554     10.89s\n",
      "  13    16.83         0.743265       15         0.874735         0.635764     11.84s\n",
      "  14    17.04         0.741628       13         0.884417         0.493354      8.27s\n",
      "  15    17.02         0.744034       26         0.892236         0.647918      6.72s\n",
      "  16    18.23         0.738467       43         0.879153         0.377872      4.87s\n",
      "  17    18.09         0.722973       16         0.889763         0.508006      3.33s\n",
      "  18    19.58          0.70793       27         0.889402         0.639016      1.74s\n",
      "  19    21.69         0.697116       24         0.888272          0.56025      0.00s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "SymbolicTransformer(function_set=['add', 'sub', 'mul', 'div', 'sqrt', 'log',\n",
       "                                  'abs', 'neg', 'inv', 'max', 'min'],\n",
       "                    max_samples=0.9, n_jobs=3, parsimony_coefficient=0.0005,\n",
       "                    population_size=2000, random_state=0, verbose=1)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function_set = ['add', 'sub', 'mul', 'div',\n",
    "                'sqrt', 'log', 'abs', 'neg', 'inv',\n",
    "                'max', 'min']\n",
    "gp = SymbolicTransformer(generations=20, population_size=2000,\n",
    "                         hall_of_fame=100, n_components=10,\n",
    "                         function_set=function_set,\n",
    "                         parsimony_coefficient=0.0005,\n",
    "                         max_samples=0.9, verbose=1,\n",
    "                         random_state=0, n_jobs=3)\n",
    "gp.fit(boston.data[:300, :], boston.target[:300])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "54178472",
   "metadata": {},
   "outputs": [],
   "source": [
    "gp_features = gp.transform(boston.data)\n",
    "new_boston = np.hstack((boston.data, gp_features))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "4282f94a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8418372105182064\n"
     ]
    }
   ],
   "source": [
    "est = Ridge()\n",
    "est.fit(new_boston[:300, :], boston.target[:300])\n",
    "print(est.score(new_boston[300:, :], boston.target[300:]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55973fb4",
   "metadata": {},
   "source": [
    "*We see that when we applied Ridge Estimator to previous dataset without any symbolic transformer , The R-square value was lower i.e approx 75 % of variance , however when we applied the Symbolic transformer to the new dataset we get the R-square value as 0.84 i.e approx 84 % of variance of data in the estimation.* "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
